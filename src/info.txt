====================================================================================================
discrete cosine transform
====================================================================================================


=====Frequecncu components in Images=====
high-frequency ->rapid change
low-frequency ->graduall change/smother changes

real world images ->low_req most of the cases
the human visual system is less sensitive to high_freq detail


========How to get get frequecy components high/low============

Discrete cosine transform (DCT)

dct takes input the sample from the original signal -> outputs the same size 
called DCT coffiecients

this coefficient represents the contrubution of different signal that gives back original signal


for example when you input the dct with cosine wave 
you get only single non-zero value (coeff) bcz there is only one signal 
contributing that is cos wave itself

as amplitude changes -> so do the coffieciet 
shifting up or down along y-axis -> effects zeroth index of ouput wave
frequency changes -> coffiecient index changes

cos(x)-> X1
cos(2x)-> X2
cos(kx)->Xk

========================================
extracting the low-frequecy values
========================================

after transforming the normal pixel values in to the dct-2
we can easily extract low frequency values in oder to generate
hash 
8*8(low-freq)->mean_value->phash
compare the hash values of different images and decied weather its 
similar or not using threshould_value

====================
file-handling in c
====================


FILE *fh_output;
fh_output =fopen("io.txt","w"); //if io.txt does not exists it will create new

fputs("string",fh_output);  //string->fh_output file



fclose(fh_output);//after dealing with the file













╔══════════════════════════════════════════════════════════════════════╗
║                    IMAGE pHASH GENERATION FLOW                       ║
╚══════════════════════════════════════════════════════════════════════╝

───────────────────────────────────────────────────────────────────────
1️⃣  LOAD IMAGE
───────────────────────────────────────────────────────────────────────
➤ Use `stb_image.h` (or similar library) to load the image:
    - Any format (PNG, JPG, etc)
    - Convert to grayscale on load or manually later
    - Example:
      image loaded width of 1767px, height of 1326px, channels: 4

───────────────────────────────────────────────────────────────────────
2️⃣  RESIZE TO 32x32 GRAYSCALE
───────────────────────────────────────────────────────────────────────
➤ Resample the image to 32x32 resolution.
➤ Convert to single channel (grayscale):
    - Grayscale value = weighted average of RGB
      (e.g. 0.3*R + 0.59*G + 0.11*B)
➤ Save this for debug:
    - Example: `images/out_gray32x32.png`

───────────────────────────────────────────────────────────────────────
3️⃣  APPLY DCT-II (2D Discrete Cosine Transform)
───────────────────────────────────────────────────────────────────────
➤ Perform DCT on the 32x32 grayscale matrix:
    - Break down image into frequency components
    - Most energy is in low-frequency (top-left) region

➤ Extract top-left 8x8 DCT block:
    Example matrix:
    ┌───────────────────────────────┐
    │ 17113.37   182.30  -2363.51   │
    │ -889.65    317.98   733.70    │
    │ -4582.14  -343.59   370.11    │
    │  ...                           │
    └───────────────────────────────┘

───────────────────────────────────────────────────────────────────────
4️⃣  CALCULATE pHASH
───────────────────────────────────────────────────────────────────────
➤ Compute mean of the 63 DCT values (exclude DC term at [0][0])
    Example: Mean = -191.12

➤ For each of 64 values (or just 63 + DC if desired):
    - Set bit to 1 if DCT value > mean
    - Set bit to 0 otherwise

➤ Combine bits into `uint64_t` hash:
    Example: 0xa3b29c88ef45d012

───────────────────────────────────────────────────────────────────────
5️⃣  COMPARE HASHES
───────────────────────────────────────────────────────────────────────
➤ Compute Hamming distance between two hashes:
    - Count differing bits
    - Normalize = dist / 64
    - Similarity % = (1 - normalized) * 100

───────────────────────────────────────────────────────────────────────
✔ This method is robust to:
    - Scaling
    - Color changes
    - Minor crops or noise

✘ It is weak against:
    - Major crops (large portion missing)
    - Severe distortions or rotations
───────────────────────────────────────────────────────────────────────
for more informaion refer this blog: https://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html
